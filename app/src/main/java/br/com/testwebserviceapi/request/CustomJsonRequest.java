package br.com.testwebserviceapi.request;public class CustomJsonRequest {    /**private RequestQueue mQueue;    public void JsonRegister() {        User user = new User();        String jsonObject = new Gson().toJson(user);        String url = "https://serene-sea-70010.herokuapp.com/login/create";        JsonRequest jsonReq = new JsonRequest(Request.Method.POST, url, jsonObject, new Response.Listener<Integer>() {            @Override            public void onResponse(Integer response) {                Log.i("Resposta >> ", response.toString());                String resposta;                if (response == -2) {                    resposta = "Email inválido";                    btnRegister.setVisibility(View.VISIBLE);                    progressReg.setVisibility(View.INVISIBLE);                } else if (response == -1) {                    resposta = "Usuario já existe";                    btnRegister.setVisibility(View.VISIBLE);                    progressReg.setVisibility(View.INVISIBLE);                } else if (response > 0) {                    resposta = "Conta criada com sucesso";                    Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);                    startActivity(intent);                    finish();                } else {                    resposta = "Não foi possivel realizar o cadastro, tente novamente mais tarde ou verifique os dados informados";                    btnRegister.setVisibility(View.VISIBLE);                    progressReg.setVisibility(View.INVISIBLE);                }                Toast.makeText(getApplicationContext(), resposta, Toast.LENGTH_SHORT).show();            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Log.e("Log", "ERROR sendJSON >> " + error.toString(), error);                Toast.makeText(getApplicationContext(), "Verifique sua conexão com a internet", Toast.LENGTH_SHORT).show();            }        }) {            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<String, String>();                headers.put("Content-Type", "application/json");                headers.put("Accept", "application/json");                return headers;            }            @Override            protected Response<Integer> parseNetworkResponse(NetworkResponse response) {                try {                    String jsonString = new String(response.data, HttpHeaderParser.parseCharset(response.headers));                    return Response.success(new Integer(jsonString), HttpHeaderParser.parseCacheHeaders(response));                } catch (UnsupportedEncodingException e) {                    return Response.error(new ParseError(e));                }            }        };        jsonReq.setTag(LoginActivity.class);        mQueue.add(jsonReq);    }    }**/}